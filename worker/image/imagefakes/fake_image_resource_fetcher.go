// This file was generated by counterfeiter
package imagefakes

import (
	"io"
	"os"
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
	"github.com/concourse/atc/worker"
	"github.com/concourse/atc/worker/image"
)

type FakeImageResourceFetcher struct {
	FetchStub        func(logger lager.Logger, resourceUser dbng.ResourceUser, signals <-chan os.Signal, imageResourceType string, imageResourceSource atc.Source, metadata dbng.ContainerMetadata, tags atc.Tags, teamID int, customTypes atc.VersionedResourceTypes, imageFetchingDelegate worker.ImageFetchingDelegate, privileged bool) (worker.Volume, io.ReadCloser, atc.Version, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		logger                lager.Logger
		resourceUser          dbng.ResourceUser
		signals               <-chan os.Signal
		imageResourceType     string
		imageResourceSource   atc.Source
		metadata              dbng.ContainerMetadata
		tags                  atc.Tags
		teamID                int
		customTypes           atc.VersionedResourceTypes
		imageFetchingDelegate worker.ImageFetchingDelegate
		privileged            bool
	}
	fetchReturns struct {
		result1 worker.Volume
		result2 io.ReadCloser
		result3 atc.Version
		result4 error
	}
	fetchReturnsOnCall map[int]struct {
		result1 worker.Volume
		result2 io.ReadCloser
		result3 atc.Version
		result4 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageResourceFetcher) Fetch(logger lager.Logger, resourceUser dbng.ResourceUser, signals <-chan os.Signal, imageResourceType string, imageResourceSource atc.Source, metadata dbng.ContainerMetadata, tags atc.Tags, teamID int, customTypes atc.VersionedResourceTypes, imageFetchingDelegate worker.ImageFetchingDelegate, privileged bool) (worker.Volume, io.ReadCloser, atc.Version, error) {
	fake.fetchMutex.Lock()
	ret, specificReturn := fake.fetchReturnsOnCall[len(fake.fetchArgsForCall)]
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		logger                lager.Logger
		resourceUser          dbng.ResourceUser
		signals               <-chan os.Signal
		imageResourceType     string
		imageResourceSource   atc.Source
		metadata              dbng.ContainerMetadata
		tags                  atc.Tags
		teamID                int
		customTypes           atc.VersionedResourceTypes
		imageFetchingDelegate worker.ImageFetchingDelegate
		privileged            bool
	}{logger, resourceUser, signals, imageResourceType, imageResourceSource, metadata, tags, teamID, customTypes, imageFetchingDelegate, privileged})
	fake.recordInvocation("Fetch", []interface{}{logger, resourceUser, signals, imageResourceType, imageResourceSource, metadata, tags, teamID, customTypes, imageFetchingDelegate, privileged})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(logger, resourceUser, signals, imageResourceType, imageResourceSource, metadata, tags, teamID, customTypes, imageFetchingDelegate, privileged)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.fetchReturns.result1, fake.fetchReturns.result2, fake.fetchReturns.result3, fake.fetchReturns.result4
}

func (fake *FakeImageResourceFetcher) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeImageResourceFetcher) FetchArgsForCall(i int) (lager.Logger, dbng.ResourceUser, <-chan os.Signal, string, atc.Source, dbng.ContainerMetadata, atc.Tags, int, atc.VersionedResourceTypes, worker.ImageFetchingDelegate, bool) {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].logger, fake.fetchArgsForCall[i].resourceUser, fake.fetchArgsForCall[i].signals, fake.fetchArgsForCall[i].imageResourceType, fake.fetchArgsForCall[i].imageResourceSource, fake.fetchArgsForCall[i].metadata, fake.fetchArgsForCall[i].tags, fake.fetchArgsForCall[i].teamID, fake.fetchArgsForCall[i].customTypes, fake.fetchArgsForCall[i].imageFetchingDelegate, fake.fetchArgsForCall[i].privileged
}

func (fake *FakeImageResourceFetcher) FetchReturns(result1 worker.Volume, result2 io.ReadCloser, result3 atc.Version, result4 error) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 worker.Volume
		result2 io.ReadCloser
		result3 atc.Version
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeImageResourceFetcher) FetchReturnsOnCall(i int, result1 worker.Volume, result2 io.ReadCloser, result3 atc.Version, result4 error) {
	fake.FetchStub = nil
	if fake.fetchReturnsOnCall == nil {
		fake.fetchReturnsOnCall = make(map[int]struct {
			result1 worker.Volume
			result2 io.ReadCloser
			result3 atc.Version
			result4 error
		})
	}
	fake.fetchReturnsOnCall[i] = struct {
		result1 worker.Volume
		result2 io.ReadCloser
		result3 atc.Version
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeImageResourceFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeImageResourceFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ image.ImageResourceFetcher = new(FakeImageResourceFetcher)
